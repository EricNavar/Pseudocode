//takes a sorted singly-linked list as input and removes any duplicates from the list
removeDuplicates(list)
{
    node curr = list->head
    if (curr==null) or (curr->next == null)
        return

    while (curr->next != null)
        if (curr->value == curr->next->value)
            node toDelete = curr->next
            curr->next = curr->next->next
            delete toDelete
        else
            curr=curr->next
}

//=======================

//remove duplicate nodes in an unsorted singly-linked list
//O(n^2)
removeDuplicates()
{
	node curr = list->head
	if curr = null or curr->next == null
		return
	while curr->next != null
		node executioner = curr
		while executioner->next != null
			if executioner->next == curr
				murder = executioner->next
				executioner->next = executioner->next->next
				delete murder
			else
				executioner = executioner->next
		curr = curr->next
}