//s is the start vertex
Dijkstras(vertex s)
{
    Create array dist and prev
    set all values in dist to the max integer
    dist[s] = 0
    for vertex v adjacent to s
        dist[v] = weight between s and v
        prev[v] = s

    vector S = { s }
    vector notS = all vertices in the graph except for s

    for vertex u in notS
        min = u with the smallest dist[u]
        notS.remove(min)
        S.add(min)

        for vertex v adjacent to min
            if (dist[min] + v.weight) < dist[v]
                dist[v] = dist[min] + v.weight
                prev[v] = min
}

Kruskals(Graph g)
{
    Graph mst
    //DisjointSets has algorithms for union and find
    DisjointSets d
    vector edges = all edges in g
    sort edges by weight
    for Edge e in edges
        //if e will not form a cycle then add it
        if (d.find(e.to) != d.find(e.from))
            mst.insertEdge(e)
            d.union(e.from, e.to)
}

/====================================================================
bool isCyclic()
{
    V = number of vertices in graph
    // Mark all the vertices as not visited and not part of recursion stack
    bool visited[V]
    bool recStack[V]
    set all values in visited and recStack to false
    //Call the recursive helper function to detect cycle
    //in different DFS trees for each vertex v in g
    for int i from 0 to V - 1
        if (isCyclicHelper(i, visited, recStack))
            return true
    return false
}

bool isCyclicHelper(int v, bool visited[], bool *recStack)
{
    if(visited[v] == false)
        // Mark the current node as visited and part of recursion stack
        visited[v] = true
        recStack[v] = true
        for all vertices i adjacent to v
            if ( visited[i] == false AND isCyclicHelper(i, visited, recStack) )
                return true
            else if (recStack[i])
                return true
    recStack[v] = false
    return false
}