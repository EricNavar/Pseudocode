int findSumDigits(int num)
{
    //base case
    if num < 10
        return num

    //recursive case
    int thisNum = num%10
    return thisNum+findSumDigits(num/10)
}

//Given a starting number and an increment, print a pattern that goes from
//starting number to the first negative number, then back up to the starting number
pattern(int number, int increment, int currentNumber, bool goingUp)
{
    //base case
    if (currentNumber == number)
        print number
        return

    //recursive case(s)
    print currentNumber
    //going down
    if (!goingUp)
        if (currentNumber) <=0
                return pattern(number, currentNumber+number, true)
        else
                return pattern(number, currentNumber-number, false)
    //going up
    else
        return pattern(number, currentNumber+number, true)
}

//countOccurrences of the digit 8 in a non-negative number
//computational complexity of log base 10, or O(log n)
int count8(int num)
{
    if (num < 0)
        return -1
    if (num < 10)
        return (num == 8)
    result = (num%10 == 8)
    return result + count8(num/10)
}