//startV is the start vertex
BreadthFirstSearch(int startV)
{   
    enqueue start
    mark startV as visited
    while the queue is not empty
    {
        Take a vertex, u, out of the queue and visit u
        for all vertices v adjacent to u 
        {
            if v has not been visited
            {
                mark v visited
                enqueue v
            }
        }
    }
}
//================================
DFS(int v)
{
	bool[nodeCount] visited
    mark all visited elements false
    list vertices = empty list
	DFS(v, visited, vertices)
}

DFSHelper(vertex v, bool[] visited, list vertices)
{
	vertices.add(v)
	v.visited = true
	for each neighbor w of v
		if visited[w] == false
			DFSHelper(w, visited, vertices)
}
//================================
int shortestPath(int from, int to)
{
    
}