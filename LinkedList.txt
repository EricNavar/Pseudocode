//these are all for singly-linked lists
insertHead(value)
{
    Node n = new Node(value)
    n->next = head
    head = n
}

insertTail(value)
{
    Node n = new Node(value)
    tail->next = n
    tail = n
}

//returns the new head
//returns null if the index is out of bounds
node insertAtIndex(index, value)
{
    Node *newNode = new Node()
    newNode->value = valueInput
    
    if (index == 0)
        newNode->next = head
        return newNode
    
    Node *aft = head->next
    Node *curr = head
    for (i = 0; i < index - 1; i++)
        if aft == null
            return null
        aft = aft->next
        curr = curr->next
    curr->next = newNode
    newNode->next = aft
    return head
}

deleteHead()
{
    if empty, do nothing
    temp = head
    head = head.next
    delete temp
}

deleteTail()
{
    if empty, do nothing
    Vertex pre = head
    temp = head.next
    while (temp.next != null)
    pre = pre.next
    pre.next = null
    delete temp, tail = pre
}

delete()
{
    if empty, do nothing
    Vertex pre = head
    for (k = 0; k < i-1; k++)
    pre = pre.next
    Vertex del = pre.next, aft = del.next
    pre.next = aft // bypass del
    delete del
}

//returns -1 if not found
search(int value)
{
    int index = 0
    while(node != null AND node->value = value)
        node = node->next
        index++
    if(node)
        return index
    else
        return -1
}

//reverse a singly-linked list
//first call would be reverse(1,null)
int reverse(Node* node, Node* previous)
{
    //Base cases
    //zero items
    if node == null 
        return null
    //one item (or last item)
    if node->next == null
        node->next = previous
        return node
    //Recursive case
    Node* next = node->next
    node->next = previous
    reverse(next, node)
}