//Write pseudocode algorithm that runs in O(n) time that calculates the Padovan sequence 
//P(n) = P(n-2) + P(n-3) 
//P(1) = P(2) = P(3) = 1

int Padovan(int n)
{   
    int pad[n]
    pad[0]=0
    pad[1]=1
    pad[2]=1
    for (int i=3; i<=n; i++)
        pad[i]=pad[i-2]+pad[i-3]
    return pad[n]
}

int Fibonacci(int n)
{
    int fib[n]
    fib[0] = 0
    fib[1] = 1
    for(int i = 0; i <= n; i++)
        fib[i] = fib[i-1] + fib[i-2]
    return fib[n]
}

//Fibonacci but recursive
int[] dp = new int[ SIZE ]; // all values initialized to 0
public int fib( int n ) {
	if ( n == 0 || n == 1 )
		return 1;
	if ( dp[ n ] != 0 )
		return dp[ n ];
	return dp[ n ] = fib( n - 1 ) + fib( n - 2 );
}

/=================================
//Write an algorithm that calculates the coefficient.  P(n, k) is the number of
//ways to obtain an ordered subset having k elements from a set of n elements
//P(n, k) = n!/(n-k)! = P(n-1, k) + k*P(n-1, k-1), P(n, 0) = 1, P(n, k) = 0 for k>n

//not DP
public int pascal( int n, int k )
{
    // Base case: the first and last element of a row is 1
    if ( k == 0 || k == n ) 
        return 1
    return pascal( n - 1, k - 1 ) + pascal( n - 1, k )
}

//DP
int[][] dp = new int[ N_SIZE ][ K_SIZE ];
public int pascal( int n, int k ) 
{
    if ( k == 0 || k == n )
        return 1
    if ( dp[ n ][ k ] != 0 )
        return dp[ n ][ k ]
    return dp[ n ][ k ] = pascal( n - 1, k - 1 ) + pascal( n - 1, k )
}

//not recursively
int permutationCoeff(int n, int k) 
{ 
    int P[n + 1][k + 1]; 
    // Calculate value of Permutation Coefficient in bottom up manner 
    for (int i = 0; i <= n; i++) 
    {
        for (int j = 0; j <= min(i, k); j++)             
        {
            // Base Cases 
            if (j == 0) 
                P[i][j] = 1
            // Calculate value using previously stored values
            else
                P[i][j] = P[i - 1][j] +   (j * P[i - 1][j - 1])
        } 
        if (i<k)
        //so it’s there for the next row
            P[i][j + 1] = 0;
    }
    return P[n][k]
}
//================================

shortestSubsequence(char [] string1, char [] string2)
{
    int m = string1.length, n = string2.length
    int table[m+1][n+1]

    for i=0 to m
        table[i][0]=0
    for j=0 to n
        table[0][j]=0
    //fill the table
    for i=1 to m
        for j=1 to n
            if string1[i-1]==string2[j-1]
                table[i][j]=table[i-1][j-1]+1
            else
                table[i][j]=0
    //find the largest value in the table
    int max=0
    for i=0 to m
        for j=0 to n
            if table[i][j]>max
                max = table[i][j
    return max	
}

//================================

void solveKnapsack(int capacity, vector<pair<int, int>> theData) 
{ 
    //make a table that has capacity + 1 columns and number of items + 1 rows 
    int numRows = theData.size() + 1; 
    int theTable[numRows][capacity+1]; 
    //fill in zeros in row 0 
    for (int i=0; i<(capacity+1); i++) 
                theTable[0][i] = 0; 
    //fill in zeros in column 0 
    for (int i=0; i<numRows; i++) 
                theTable[i][0] = 0; 
    //solve each row 
    for (int i=1; i<numRows; i++) { 
    for (int j=1; j<(capacity+1); j++) { 
        if ((theData[i-1]).second > j) 
            //weight is bigger than capacity
            theTable[i][j] = theTable[i-1][j];
        else if ( (theTable[i-1][j-(theData[i-1]).second]+(theData[i-1]).first) >theTable[i-1][j])     
            //adding the weight is optimum
            theTable[i][j] = theTable[i-1][j-(theData[i-1]).second]+(theData[i-1]).first;  
        else theTable[i][j] = theTable[i-1][j];} }  //not adding the weight is optimum
    cout << theTable[numRows-1][capacity]; 
    return;
}
