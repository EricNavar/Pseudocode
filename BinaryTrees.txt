
//a tree with a single node has a height of 1
height(root)
{
	if root == null
		return 0
	if (root->left == null) and (root->right == null)
		return 1
	int heightL = 1+height(root->left)
	int heightR = 1+height(root->right)

	if heightL > heightR
		return heightL
	else
		return heightR
}

int bal(root)
{
	int HL = height(root->left)
	int HR = height(root->right)
		
	if (HL-HR) > 1 return false
	if (HR-HL) > 1 return false

    if root == null
        return true
    if (root->left == null) and (root->right == null)
        return true

    return (bal(root->left) && bal(root->right))
}

inOrderTraversal(Node n)
{
	if(n == nullptr)
		return
	if (n->left != nullptr)
		inOrderTraversal(n->left)
	cout << n->value
	if (n->right != nullptr)
		inOrderTraversal(n->right)
}

//returns node with value
Node search(Node head, int value)
{
	if head == null
		return null
	else if head->value == value
		return head
	else if head->value < value
		search(head->right, value)
	else
		search(head->left, value)
}

inOrderPredecessor()
{
	if this.left != null
		return findMax(this.left)
	else
		p = this.parent, T = this
	while(p != null && T == p.left)
		T = p, p = T.parent
	if p is null
		return -1
	else
		return p
}

insertValue(int value)
{
	if insertion point is found
		create new vertex
	if value < this key
		go left
	else
		go right
}